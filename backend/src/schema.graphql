# import * from './generated/prisma.graphql'
type SuccessMessage {
  message: String
}

type Mutation {
  signUp(email: String!, password: String!, firstName: String!, lastName: String!, username: String!): User!
  login(email: String!, password: String!): User!
  logout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updateRole(role: Role, userId: ID!): User
  submitElection(election: ElectionInput!): Election
  submitVote(vote: VoteInput): SuccessMessage
}

type Query {
  myself: User
  users(roles: [Role], accountStatus: AccountStatus, accountType: AccountType): [User]!
  user(username: String): User!
  getOfficers: [User!]!
  getMembers(accountTypes: [AccountType]): [User!]!
  electionCandidates(accountType: AccountType!, accountStatus: AccountStatus!): [User]!
  getActiveElections: [Election]!
  getActiveElectionsWithResults: [Election]!
  getElection(id: ID!): Election!
  getUserVote(ballot: ID): [Vote]!
  getElections(startTime: DateTime, endTime: DateTime): [Election]!
}

type User {
  id: ID!
  joined: DateTime
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  avatarSmall: String
  titles: [String]
  role: Role!
  accountStatus: AccountStatus!
  accountType: AccountType!
  phone: String
  vehicle: Vehicle
}

type Result {
  candidate: User
  count: Int!
}

type Ballot {
  id: ID!
  title: String!
  desc: String
  candidates: [User!]!
  votes: [Vote]
  results: [Result]
}

input ElectionInput {
  electionName: String!
  startTime: String!
  endTime: String!
  races: [BallotInput!]!
}

input BallotInput {
  id: String,
  title: String!
  desc: String
  candidates: [UserInput!]!
  # votes: [Vote] @relation(name: "BallotVote")
}

input UserInput {
  id: ID!
}

input VoteInput {
  ballot: ID!
  dateTime: DateTime!
  candidate: ID
}
