# source: https://us1.prisma.sh/four-players-co/four-players-co/dev
# timestamp: Fri Jul 05 2019 16:55:18 GMT-0600 (Mountain Daylight Time)

enum AccountStatus {
  ACTIVE
  PAST_DUE
  DELINQUENT
  REMOVED
  RESIGNED
  INACTIVE
  LIMITED
  LOCKED
}

enum AccountType {
  FULL
  ASSOCIATE
  EMERITUS
  GUEST
}

type AggregateBallot {
  count: Int!
}

type AggregateBandaid {
  count: Int!
}

type AggregateCondition {
  count: Int!
}

type AggregateContactInfo {
  count: Int!
}

type AggregateElection {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateLogItem {
  count: Int!
}

type AggregateMembershipLogItem {
  count: Int!
}

type AggregatePreference {
  count: Int!
}

type AggregateRSVP {
  count: Int!
}

type AggregateRunReport {
  count: Int!
}

type AggregateTrail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserMeta {
  count: Int!
}

type AggregateVehicle {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type Ballot implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String
  candidates(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type BallotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BallotEdge]!
  aggregate: AggregateBallot!
}

input BallotCreateInput {
  id: ID
  title: String!
  desc: String
  candidates: UserCreateManyWithoutCandidateForInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateManyInput {
  create: [BallotCreateInput!]
  connect: [BallotWhereUniqueInput!]
}

input BallotCreateManyWithoutCandidatesInput {
  create: [BallotCreateWithoutCandidatesInput!]
  connect: [BallotWhereUniqueInput!]
}

input BallotCreateOneWithoutVotesInput {
  create: BallotCreateWithoutVotesInput
  connect: BallotWhereUniqueInput
}

input BallotCreateWithoutCandidatesInput {
  id: ID
  title: String!
  desc: String
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutVotesInput {
  id: ID
  title: String!
  desc: String
  candidates: UserCreateManyWithoutCandidateForInput
}

"""An edge in a connection."""
type BallotEdge {
  """The item at the end of the edge."""
  node: Ballot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BallotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
}

type BallotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String
}

input BallotScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BallotScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BallotScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BallotScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
}

type BallotSubscriptionPayload {
  mutation: MutationType!
  node: Ballot
  updatedFields: [String!]
  previousValues: BallotPreviousValues
}

input BallotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BallotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BallotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BallotSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BallotWhereInput
}

input BallotUpdateDataInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateManyDataInput {
  title: String
  desc: String
}

input BallotUpdateManyInput {
  create: [BallotCreateInput!]
  connect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  disconnect: [BallotWhereUniqueInput!]
  delete: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueNestedInput!]
  updateMany: [BallotUpdateManyWithWhereNestedInput!]
  deleteMany: [BallotScalarWhereInput!]
  upsert: [BallotUpsertWithWhereUniqueNestedInput!]
}

input BallotUpdateManyMutationInput {
  title: String
  desc: String
}

input BallotUpdateManyWithoutCandidatesInput {
  create: [BallotCreateWithoutCandidatesInput!]
  connect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  disconnect: [BallotWhereUniqueInput!]
  delete: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueWithoutCandidatesInput!]
  updateMany: [BallotUpdateManyWithWhereNestedInput!]
  deleteMany: [BallotScalarWhereInput!]
  upsert: [BallotUpsertWithWhereUniqueWithoutCandidatesInput!]
}

input BallotUpdateManyWithWhereNestedInput {
  where: BallotScalarWhereInput!
  data: BallotUpdateManyDataInput!
}

input BallotUpdateOneRequiredWithoutVotesInput {
  create: BallotCreateWithoutVotesInput
  connect: BallotWhereUniqueInput
  update: BallotUpdateWithoutVotesDataInput
  upsert: BallotUpsertWithoutVotesInput
}

input BallotUpdateWithoutCandidatesDataInput {
  title: String
  desc: String
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutVotesDataInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
}

input BallotUpdateWithWhereUniqueNestedInput {
  where: BallotWhereUniqueInput!
  data: BallotUpdateDataInput!
}

input BallotUpdateWithWhereUniqueWithoutCandidatesInput {
  where: BallotWhereUniqueInput!
  data: BallotUpdateWithoutCandidatesDataInput!
}

input BallotUpsertWithoutVotesInput {
  update: BallotUpdateWithoutVotesDataInput!
  create: BallotCreateWithoutVotesInput!
}

input BallotUpsertWithWhereUniqueNestedInput {
  where: BallotWhereUniqueInput!
  update: BallotUpdateDataInput!
  create: BallotCreateInput!
}

input BallotUpsertWithWhereUniqueWithoutCandidatesInput {
  where: BallotWhereUniqueInput!
  update: BallotUpdateWithoutCandidatesDataInput!
  create: BallotCreateWithoutCandidatesInput!
}

input BallotWhereInput {
  """Logical AND on all given filters."""
  AND: [BallotWhereInput!]

  """Logical OR on all given filters."""
  OR: [BallotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BallotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  candidates_every: UserWhereInput
  candidates_some: UserWhereInput
  candidates_none: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input BallotWhereUniqueInput {
  id: ID
}

type Bandaid implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  event: Event
  memberInvolved: User
  title: String
  description: String
}

"""A connection to a list of items."""
type BandaidConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BandaidEdge]!
  aggregate: AggregateBandaid!
}

input BandaidCreateInput {
  id: ID
  title: String
  description: String
  event: EventCreateOneWithoutBandaidsInput
  memberInvolved: UserCreateOneWithoutBandaidsInput
}

input BandaidCreateManyWithoutEventInput {
  create: [BandaidCreateWithoutEventInput!]
  connect: [BandaidWhereUniqueInput!]
}

input BandaidCreateManyWithoutMemberInvolvedInput {
  create: [BandaidCreateWithoutMemberInvolvedInput!]
  connect: [BandaidWhereUniqueInput!]
}

input BandaidCreateWithoutEventInput {
  id: ID
  title: String
  description: String
  memberInvolved: UserCreateOneWithoutBandaidsInput
}

input BandaidCreateWithoutMemberInvolvedInput {
  id: ID
  title: String
  description: String
  event: EventCreateOneWithoutBandaidsInput
}

"""An edge in a connection."""
type BandaidEdge {
  """The item at the end of the edge."""
  node: Bandaid!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BandaidOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type BandaidPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  title: String
  description: String
}

input BandaidScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BandaidScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BandaidScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BandaidScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type BandaidSubscriptionPayload {
  mutation: MutationType!
  node: Bandaid
  updatedFields: [String!]
  previousValues: BandaidPreviousValues
}

input BandaidSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BandaidSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BandaidSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BandaidSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BandaidWhereInput
}

input BandaidUpdateInput {
  title: String
  description: String
  event: EventUpdateOneWithoutBandaidsInput
  memberInvolved: UserUpdateOneWithoutBandaidsInput
}

input BandaidUpdateManyDataInput {
  title: String
  description: String
}

input BandaidUpdateManyMutationInput {
  title: String
  description: String
}

input BandaidUpdateManyWithoutEventInput {
  create: [BandaidCreateWithoutEventInput!]
  connect: [BandaidWhereUniqueInput!]
  set: [BandaidWhereUniqueInput!]
  disconnect: [BandaidWhereUniqueInput!]
  delete: [BandaidWhereUniqueInput!]
  update: [BandaidUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [BandaidUpdateManyWithWhereNestedInput!]
  deleteMany: [BandaidScalarWhereInput!]
  upsert: [BandaidUpsertWithWhereUniqueWithoutEventInput!]
}

input BandaidUpdateManyWithoutMemberInvolvedInput {
  create: [BandaidCreateWithoutMemberInvolvedInput!]
  connect: [BandaidWhereUniqueInput!]
  set: [BandaidWhereUniqueInput!]
  disconnect: [BandaidWhereUniqueInput!]
  delete: [BandaidWhereUniqueInput!]
  update: [BandaidUpdateWithWhereUniqueWithoutMemberInvolvedInput!]
  updateMany: [BandaidUpdateManyWithWhereNestedInput!]
  deleteMany: [BandaidScalarWhereInput!]
  upsert: [BandaidUpsertWithWhereUniqueWithoutMemberInvolvedInput!]
}

input BandaidUpdateManyWithWhereNestedInput {
  where: BandaidScalarWhereInput!
  data: BandaidUpdateManyDataInput!
}

input BandaidUpdateWithoutEventDataInput {
  title: String
  description: String
  memberInvolved: UserUpdateOneWithoutBandaidsInput
}

input BandaidUpdateWithoutMemberInvolvedDataInput {
  title: String
  description: String
  event: EventUpdateOneWithoutBandaidsInput
}

input BandaidUpdateWithWhereUniqueWithoutEventInput {
  where: BandaidWhereUniqueInput!
  data: BandaidUpdateWithoutEventDataInput!
}

input BandaidUpdateWithWhereUniqueWithoutMemberInvolvedInput {
  where: BandaidWhereUniqueInput!
  data: BandaidUpdateWithoutMemberInvolvedDataInput!
}

input BandaidUpsertWithWhereUniqueWithoutEventInput {
  where: BandaidWhereUniqueInput!
  update: BandaidUpdateWithoutEventDataInput!
  create: BandaidCreateWithoutEventInput!
}

input BandaidUpsertWithWhereUniqueWithoutMemberInvolvedInput {
  where: BandaidWhereUniqueInput!
  update: BandaidUpdateWithoutMemberInvolvedDataInput!
  create: BandaidCreateWithoutMemberInvolvedInput!
}

input BandaidWhereInput {
  """Logical AND on all given filters."""
  AND: [BandaidWhereInput!]

  """Logical OR on all given filters."""
  OR: [BandaidWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BandaidWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  event: EventWhereInput
  memberInvolved: UserWhereInput
}

input BandaidWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Condition implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  report: RunReport!
  status: TrailCondition!
  notes: String
}

"""A connection to a list of items."""
type ConditionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConditionEdge]!
  aggregate: AggregateCondition!
}

input ConditionCreateInput {
  id: ID
  status: TrailCondition!
  notes: String
  report: RunReportCreateOneWithoutConditionInput!
}

input ConditionCreateOneWithoutReportInput {
  create: ConditionCreateWithoutReportInput
  connect: ConditionWhereUniqueInput
}

input ConditionCreateWithoutReportInput {
  id: ID
  status: TrailCondition!
  notes: String
}

"""An edge in a connection."""
type ConditionEdge {
  """The item at the end of the edge."""
  node: Condition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConditionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  notes_ASC
  notes_DESC
}

type ConditionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TrailCondition!
  notes: String
}

type ConditionSubscriptionPayload {
  mutation: MutationType!
  node: Condition
  updatedFields: [String!]
  previousValues: ConditionPreviousValues
}

input ConditionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConditionWhereInput
}

input ConditionUpdateInput {
  status: TrailCondition
  notes: String
  report: RunReportUpdateOneRequiredWithoutConditionInput
}

input ConditionUpdateManyMutationInput {
  status: TrailCondition
  notes: String
}

input ConditionUpdateOneWithoutReportInput {
  create: ConditionCreateWithoutReportInput
  connect: ConditionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ConditionUpdateWithoutReportDataInput
  upsert: ConditionUpsertWithoutReportInput
}

input ConditionUpdateWithoutReportDataInput {
  status: TrailCondition
  notes: String
}

input ConditionUpsertWithoutReportInput {
  update: ConditionUpdateWithoutReportDataInput!
  create: ConditionCreateWithoutReportInput!
}

input ConditionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: TrailCondition

  """All values that are not equal to given value."""
  status_not: TrailCondition

  """All values that are contained in given list."""
  status_in: [TrailCondition!]

  """All values that are not contained in given list."""
  status_not_in: [TrailCondition!]
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  report: RunReportWhereInput
}

input ConditionWhereUniqueInput {
  id: ID
}

type ContactInfo implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  street: String
  city: String
  state: String
  zip: String
  phone: Int!
}

"""A connection to a list of items."""
type ContactInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactInfoEdge]!
  aggregate: AggregateContactInfo!
}

input ContactInfoCreateInput {
  id: ID
  street: String
  city: String
  state: String
  zip: String
  phone: Int!
  user: UserCreateOneWithoutContactInfoInput
}

input ContactInfoCreateOneWithoutUserInput {
  create: ContactInfoCreateWithoutUserInput
  connect: ContactInfoWhereUniqueInput
}

input ContactInfoCreateWithoutUserInput {
  id: ID
  street: String
  city: String
  state: String
  zip: String
  phone: Int!
}

"""An edge in a connection."""
type ContactInfoEdge {
  """The item at the end of the edge."""
  node: ContactInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContactInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  phone_ASC
  phone_DESC
}

type ContactInfoPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  street: String
  city: String
  state: String
  zip: String
  phone: Int!
}

type ContactInfoSubscriptionPayload {
  mutation: MutationType!
  node: ContactInfo
  updatedFields: [String!]
  previousValues: ContactInfoPreviousValues
}

input ContactInfoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactInfoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactInfoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContactInfoWhereInput
}

input ContactInfoUpdateInput {
  street: String
  city: String
  state: String
  zip: String
  phone: Int
  user: UserUpdateOneWithoutContactInfoInput
}

input ContactInfoUpdateManyMutationInput {
  street: String
  city: String
  state: String
  zip: String
  phone: Int
}

input ContactInfoUpdateOneWithoutUserInput {
  create: ContactInfoCreateWithoutUserInput
  connect: ContactInfoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ContactInfoUpdateWithoutUserDataInput
  upsert: ContactInfoUpsertWithoutUserInput
}

input ContactInfoUpdateWithoutUserDataInput {
  street: String
  city: String
  state: String
  zip: String
  phone: Int
}

input ContactInfoUpsertWithoutUserInput {
  update: ContactInfoUpdateWithoutUserDataInput!
  create: ContactInfoCreateWithoutUserInput!
}

input ContactInfoWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactInfoWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactInfoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactInfoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  phone: Int

  """All values that are not equal to given value."""
  phone_not: Int

  """All values that are contained in given list."""
  phone_in: [Int!]

  """All values that are not contained in given list."""
  phone_not_in: [Int!]

  """All values less than the given value."""
  phone_lt: Int

  """All values less than or equal the given value."""
  phone_lte: Int

  """All values greater than the given value."""
  phone_gt: Int

  """All values greater than or equal the given value."""
  phone_gte: Int
  user: UserWhereInput
}

input ContactInfoWhereUniqueInput {
  id: ID
}

scalar DateTime

type Election implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  electionName: String!
  startTime: DateTime
  endTime: DateTime
  races(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot!]
}

"""A connection to a list of items."""
type ElectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ElectionEdge]!
  aggregate: AggregateElection!
}

input ElectionCreateInput {
  id: ID
  electionName: String!
  startTime: DateTime
  endTime: DateTime
  races: BallotCreateManyInput
}

"""An edge in a connection."""
type ElectionEdge {
  """The item at the end of the edge."""
  node: Election!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ElectionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  electionName_ASC
  electionName_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
}

type ElectionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  electionName: String!
  startTime: DateTime
  endTime: DateTime
}

type ElectionSubscriptionPayload {
  mutation: MutationType!
  node: Election
  updatedFields: [String!]
  previousValues: ElectionPreviousValues
}

input ElectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ElectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ElectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ElectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ElectionWhereInput
}

input ElectionUpdateInput {
  electionName: String
  startTime: DateTime
  endTime: DateTime
  races: BallotUpdateManyInput
}

input ElectionUpdateManyMutationInput {
  electionName: String
  startTime: DateTime
  endTime: DateTime
}

input ElectionWhereInput {
  """Logical AND on all given filters."""
  AND: [ElectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ElectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ElectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  electionName: String

  """All values that are not equal to given value."""
  electionName_not: String

  """All values that are contained in given list."""
  electionName_in: [String!]

  """All values that are not contained in given list."""
  electionName_not_in: [String!]

  """All values less than the given value."""
  electionName_lt: String

  """All values less than or equal the given value."""
  electionName_lte: String

  """All values greater than the given value."""
  electionName_gt: String

  """All values greater than or equal the given value."""
  electionName_gte: String

  """All values containing the given string."""
  electionName_contains: String

  """All values not containing the given string."""
  electionName_not_contains: String

  """All values starting with the given string."""
  electionName_starts_with: String

  """All values not starting with the given string."""
  electionName_not_starts_with: String

  """All values ending with the given string."""
  electionName_ends_with: String

  """All values not ending with the given string."""
  electionName_not_ends_with: String
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  races_every: BallotWhereInput
  races_some: BallotWhereInput
  races_none: BallotWhereInput
}

input ElectionWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  creator: User!
  description: String
  startTime: DateTime
  endTime: DateTime
  host: User
  rsvps(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP!]
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: Trail
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid!]
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
  membersOnly: Boolean
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
}

input EventCreateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutHostInput {
  create: [EventCreateWithoutHostInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutTrailInput {
  create: [EventCreateWithoutTrailInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutBandaidsInput {
  create: EventCreateWithoutBandaidsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutRunReportsInput {
  create: EventCreateWithoutRunReportsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutBandaidsInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  trail: TrailCreateOneWithoutPastEventsInput
  runReports: RunReportCreateManyWithoutEventInput
}

input EventCreateWithoutCreatorInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
}

input EventCreateWithoutHostInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  rsvps: RSVPCreateManyWithoutEventInput
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
}

input EventCreateWithoutRsvpsInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  host: UserCreateOneWithoutEventsHostedInput
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
}

input EventCreateWithoutRunReportsInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
}

input EventCreateWithoutTrailInput {
  id: ID
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserCreateOneWithoutEventsCreatedInput!
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  address_ASC
  address_DESC
  trailDifficulty_ASC
  trailDifficulty_DESC
  trailNotes_ASC
  trailNotes_DESC
  rallyAddress_ASC
  rallyAddress_DESC
  rallyTime_ASC
  rallyTime_DESC
  membersOnly_ASC
  membersOnly_DESC
}

type EventPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  trailDifficulty: TrailDifficulty

  """All values that are not equal to given value."""
  trailDifficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  trailDifficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  trailDifficulty_not_in: [TrailDifficulty!]
  trailNotes: String

  """All values that are not equal to given value."""
  trailNotes_not: String

  """All values that are contained in given list."""
  trailNotes_in: [String!]

  """All values that are not contained in given list."""
  trailNotes_not_in: [String!]

  """All values less than the given value."""
  trailNotes_lt: String

  """All values less than or equal the given value."""
  trailNotes_lte: String

  """All values greater than the given value."""
  trailNotes_gt: String

  """All values greater than or equal the given value."""
  trailNotes_gte: String

  """All values containing the given string."""
  trailNotes_contains: String

  """All values not containing the given string."""
  trailNotes_not_contains: String

  """All values starting with the given string."""
  trailNotes_starts_with: String

  """All values not starting with the given string."""
  trailNotes_not_starts_with: String

  """All values ending with the given string."""
  trailNotes_ends_with: String

  """All values not ending with the given string."""
  trailNotes_not_ends_with: String
  rallyAddress: String

  """All values that are not equal to given value."""
  rallyAddress_not: String

  """All values that are contained in given list."""
  rallyAddress_in: [String!]

  """All values that are not contained in given list."""
  rallyAddress_not_in: [String!]

  """All values less than the given value."""
  rallyAddress_lt: String

  """All values less than or equal the given value."""
  rallyAddress_lte: String

  """All values greater than the given value."""
  rallyAddress_gt: String

  """All values greater than or equal the given value."""
  rallyAddress_gte: String

  """All values containing the given string."""
  rallyAddress_contains: String

  """All values not containing the given string."""
  rallyAddress_not_contains: String

  """All values starting with the given string."""
  rallyAddress_starts_with: String

  """All values not starting with the given string."""
  rallyAddress_not_starts_with: String

  """All values ending with the given string."""
  rallyAddress_ends_with: String

  """All values not ending with the given string."""
  rallyAddress_not_ends_with: String
  rallyTime: DateTime

  """All values that are not equal to given value."""
  rallyTime_not: DateTime

  """All values that are contained in given list."""
  rallyTime_in: [DateTime!]

  """All values that are not contained in given list."""
  rallyTime_not_in: [DateTime!]

  """All values less than the given value."""
  rallyTime_lt: DateTime

  """All values less than or equal the given value."""
  rallyTime_lte: DateTime

  """All values greater than the given value."""
  rallyTime_gt: DateTime

  """All values greater than or equal the given value."""
  rallyTime_gte: DateTime
  membersOnly: Boolean

  """All values that are not equal to given value."""
  membersOnly_not: Boolean
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateManyDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventUpdateManyMutationInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventUpdateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCreatorInput!]
}

input EventUpdateManyWithoutHostInput {
  create: [EventCreateWithoutHostInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutHostInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutHostInput!]
}

input EventUpdateManyWithoutTrailInput {
  create: [EventCreateWithoutTrailInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTrailInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTrailInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateDataInput
  upsert: EventUpsertNestedInput
}

input EventUpdateOneRequiredWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput
  connect: EventWhereUniqueInput
  update: EventUpdateWithoutRsvpsDataInput
  upsert: EventUpsertWithoutRsvpsInput
}

input EventUpdateOneWithoutBandaidsInput {
  create: EventCreateWithoutBandaidsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutBandaidsDataInput
  upsert: EventUpsertWithoutBandaidsInput
}

input EventUpdateOneWithoutRunReportsInput {
  create: EventCreateWithoutRunReportsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutRunReportsDataInput
  upsert: EventUpsertWithoutRunReportsInput
}

input EventUpdateWithoutBandaidsDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateWithoutCreatorDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateWithoutHostDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateWithoutRsvpsDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateWithoutRunReportsDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
}

input EventUpdateWithoutTrailDataInput {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
}

input EventUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCreatorDataInput!
}

input EventUpdateWithWhereUniqueWithoutHostInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutHostDataInput!
}

input EventUpdateWithWhereUniqueWithoutTrailInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTrailDataInput!
}

input EventUpsertNestedInput {
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventUpsertWithoutBandaidsInput {
  update: EventUpdateWithoutBandaidsDataInput!
  create: EventCreateWithoutBandaidsInput!
}

input EventUpsertWithoutRsvpsInput {
  update: EventUpdateWithoutRsvpsDataInput!
  create: EventCreateWithoutRsvpsInput!
}

input EventUpsertWithoutRunReportsInput {
  update: EventUpdateWithoutRunReportsDataInput!
  create: EventCreateWithoutRunReportsInput!
}

input EventUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCreatorDataInput!
  create: EventCreateWithoutCreatorInput!
}

input EventUpsertWithWhereUniqueWithoutHostInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutHostDataInput!
  create: EventCreateWithoutHostInput!
}

input EventUpsertWithWhereUniqueWithoutTrailInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTrailDataInput!
  create: EventCreateWithoutTrailInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  trailDifficulty: TrailDifficulty

  """All values that are not equal to given value."""
  trailDifficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  trailDifficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  trailDifficulty_not_in: [TrailDifficulty!]
  trailNotes: String

  """All values that are not equal to given value."""
  trailNotes_not: String

  """All values that are contained in given list."""
  trailNotes_in: [String!]

  """All values that are not contained in given list."""
  trailNotes_not_in: [String!]

  """All values less than the given value."""
  trailNotes_lt: String

  """All values less than or equal the given value."""
  trailNotes_lte: String

  """All values greater than the given value."""
  trailNotes_gt: String

  """All values greater than or equal the given value."""
  trailNotes_gte: String

  """All values containing the given string."""
  trailNotes_contains: String

  """All values not containing the given string."""
  trailNotes_not_contains: String

  """All values starting with the given string."""
  trailNotes_starts_with: String

  """All values not starting with the given string."""
  trailNotes_not_starts_with: String

  """All values ending with the given string."""
  trailNotes_ends_with: String

  """All values not ending with the given string."""
  trailNotes_not_ends_with: String
  rallyAddress: String

  """All values that are not equal to given value."""
  rallyAddress_not: String

  """All values that are contained in given list."""
  rallyAddress_in: [String!]

  """All values that are not contained in given list."""
  rallyAddress_not_in: [String!]

  """All values less than the given value."""
  rallyAddress_lt: String

  """All values less than or equal the given value."""
  rallyAddress_lte: String

  """All values greater than the given value."""
  rallyAddress_gt: String

  """All values greater than or equal the given value."""
  rallyAddress_gte: String

  """All values containing the given string."""
  rallyAddress_contains: String

  """All values not containing the given string."""
  rallyAddress_not_contains: String

  """All values starting with the given string."""
  rallyAddress_starts_with: String

  """All values not starting with the given string."""
  rallyAddress_not_starts_with: String

  """All values ending with the given string."""
  rallyAddress_ends_with: String

  """All values not ending with the given string."""
  rallyAddress_not_ends_with: String
  rallyTime: DateTime

  """All values that are not equal to given value."""
  rallyTime_not: DateTime

  """All values that are contained in given list."""
  rallyTime_in: [DateTime!]

  """All values that are not contained in given list."""
  rallyTime_not_in: [DateTime!]

  """All values less than the given value."""
  rallyTime_lt: DateTime

  """All values less than or equal the given value."""
  rallyTime_lte: DateTime

  """All values greater than the given value."""
  rallyTime_gt: DateTime

  """All values greater than or equal the given value."""
  rallyTime_gte: DateTime
  membersOnly: Boolean

  """All values that are not equal to given value."""
  membersOnly_not: Boolean
  creator: UserWhereInput
  host: UserWhereInput
  rsvps_every: RSVPWhereInput
  rsvps_some: RSVPWhereInput
  rsvps_none: RSVPWhereInput
  trail: TrailWhereInput
  bandaids_every: BandaidWhereInput
  bandaids_some: BandaidWhereInput
  bandaids_none: BandaidWhereInput
  runReports_every: RunReportWhereInput
  runReports_some: RunReportWhereInput
  runReports_none: RunReportWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNDISCLOSED
}

type LogItem implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  user: User!
  event: Event
}

"""A connection to a list of items."""
type LogItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogItemEdge]!
  aggregate: AggregateLogItem!
}

input LogItemCreateInput {
  id: ID
  message: String!
  user: UserCreateOneWithoutLogInput!
  event: EventCreateOneInput
}

input LogItemCreateManyWithoutUserInput {
  create: [LogItemCreateWithoutUserInput!]
  connect: [LogItemWhereUniqueInput!]
}

input LogItemCreateWithoutUserInput {
  id: ID
  message: String!
  event: EventCreateOneInput
}

"""An edge in a connection."""
type LogItemEdge {
  """The item at the end of the edge."""
  node: LogItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LogItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  message_ASC
  message_DESC
}

type LogItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
}

input LogItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LogItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
}

type LogItemSubscriptionPayload {
  mutation: MutationType!
  node: LogItem
  updatedFields: [String!]
  previousValues: LogItemPreviousValues
}

input LogItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogItemWhereInput
}

input LogItemUpdateInput {
  message: String
  user: UserUpdateOneRequiredWithoutLogInput
  event: EventUpdateOneInput
}

input LogItemUpdateManyDataInput {
  message: String
}

input LogItemUpdateManyMutationInput {
  message: String
}

input LogItemUpdateManyWithoutUserInput {
  create: [LogItemCreateWithoutUserInput!]
  connect: [LogItemWhereUniqueInput!]
  set: [LogItemWhereUniqueInput!]
  disconnect: [LogItemWhereUniqueInput!]
  delete: [LogItemWhereUniqueInput!]
  update: [LogItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LogItemUpdateManyWithWhereNestedInput!]
  deleteMany: [LogItemScalarWhereInput!]
  upsert: [LogItemUpsertWithWhereUniqueWithoutUserInput!]
}

input LogItemUpdateManyWithWhereNestedInput {
  where: LogItemScalarWhereInput!
  data: LogItemUpdateManyDataInput!
}

input LogItemUpdateWithoutUserDataInput {
  message: String
  event: EventUpdateOneInput
}

input LogItemUpdateWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput!
  data: LogItemUpdateWithoutUserDataInput!
}

input LogItemUpsertWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput!
  update: LogItemUpdateWithoutUserDataInput!
  create: LogItemCreateWithoutUserInput!
}

input LogItemWhereInput {
  """Logical AND on all given filters."""
  AND: [LogItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  user: UserWhereInput
  event: EventWhereInput
}

input LogItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MembershipLogItem implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime
  message: String!
  user: User!
  initiator: User!
}

"""A connection to a list of items."""
type MembershipLogItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MembershipLogItemEdge]!
  aggregate: AggregateMembershipLogItem!
}

input MembershipLogItemCreateInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime
  message: String!
  user: UserCreateOneWithoutMembershipLogInput!
  initiator: UserCreateOneWithoutMembershipLogContributionsInput!
}

input MembershipLogItemCreateManyWithoutInitiatorInput {
  create: [MembershipLogItemCreateWithoutInitiatorInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
}

input MembershipLogItemCreateManyWithoutUserInput {
  create: [MembershipLogItemCreateWithoutUserInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
}

input MembershipLogItemCreateWithoutInitiatorInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime
  message: String!
  user: UserCreateOneWithoutMembershipLogInput!
}

input MembershipLogItemCreateWithoutUserInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime
  message: String!
  initiator: UserCreateOneWithoutMembershipLogContributionsInput!
}

"""An edge in a connection."""
type MembershipLogItemEdge {
  """The item at the end of the edge."""
  node: MembershipLogItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MembershipLogItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  message_ASC
  message_DESC
}

type MembershipLogItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime
  message: String!
}

input MembershipLogItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MembershipLogItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MembershipLogItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MembershipLogItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
}

type MembershipLogItemSubscriptionPayload {
  mutation: MutationType!
  node: MembershipLogItem
  updatedFields: [String!]
  previousValues: MembershipLogItemPreviousValues
}

input MembershipLogItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MembershipLogItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MembershipLogItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MembershipLogItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MembershipLogItemWhereInput
}

input MembershipLogItemUpdateInput {
  startTime: DateTime
  endTime: DateTime
  message: String
  user: UserUpdateOneRequiredWithoutMembershipLogInput
  initiator: UserUpdateOneRequiredWithoutMembershipLogContributionsInput
}

input MembershipLogItemUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  message: String
}

input MembershipLogItemUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  message: String
}

input MembershipLogItemUpdateManyWithoutInitiatorInput {
  create: [MembershipLogItemCreateWithoutInitiatorInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
  set: [MembershipLogItemWhereUniqueInput!]
  disconnect: [MembershipLogItemWhereUniqueInput!]
  delete: [MembershipLogItemWhereUniqueInput!]
  update: [MembershipLogItemUpdateWithWhereUniqueWithoutInitiatorInput!]
  updateMany: [MembershipLogItemUpdateManyWithWhereNestedInput!]
  deleteMany: [MembershipLogItemScalarWhereInput!]
  upsert: [MembershipLogItemUpsertWithWhereUniqueWithoutInitiatorInput!]
}

input MembershipLogItemUpdateManyWithoutUserInput {
  create: [MembershipLogItemCreateWithoutUserInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
  set: [MembershipLogItemWhereUniqueInput!]
  disconnect: [MembershipLogItemWhereUniqueInput!]
  delete: [MembershipLogItemWhereUniqueInput!]
  update: [MembershipLogItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MembershipLogItemUpdateManyWithWhereNestedInput!]
  deleteMany: [MembershipLogItemScalarWhereInput!]
  upsert: [MembershipLogItemUpsertWithWhereUniqueWithoutUserInput!]
}

input MembershipLogItemUpdateManyWithWhereNestedInput {
  where: MembershipLogItemScalarWhereInput!
  data: MembershipLogItemUpdateManyDataInput!
}

input MembershipLogItemUpdateWithoutInitiatorDataInput {
  startTime: DateTime
  endTime: DateTime
  message: String
  user: UserUpdateOneRequiredWithoutMembershipLogInput
}

input MembershipLogItemUpdateWithoutUserDataInput {
  startTime: DateTime
  endTime: DateTime
  message: String
  initiator: UserUpdateOneRequiredWithoutMembershipLogContributionsInput
}

input MembershipLogItemUpdateWithWhereUniqueWithoutInitiatorInput {
  where: MembershipLogItemWhereUniqueInput!
  data: MembershipLogItemUpdateWithoutInitiatorDataInput!
}

input MembershipLogItemUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipLogItemWhereUniqueInput!
  data: MembershipLogItemUpdateWithoutUserDataInput!
}

input MembershipLogItemUpsertWithWhereUniqueWithoutInitiatorInput {
  where: MembershipLogItemWhereUniqueInput!
  update: MembershipLogItemUpdateWithoutInitiatorDataInput!
  create: MembershipLogItemCreateWithoutInitiatorInput!
}

input MembershipLogItemUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipLogItemWhereUniqueInput!
  update: MembershipLogItemUpdateWithoutUserDataInput!
  create: MembershipLogItemCreateWithoutUserInput!
}

input MembershipLogItemWhereInput {
  """Logical AND on all given filters."""
  AND: [MembershipLogItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [MembershipLogItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MembershipLogItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  user: UserWhereInput
  initiator: UserWhereInput
}

input MembershipLogItemWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createContactInfo(data: ContactInfoCreateInput!): ContactInfo!
  createPreference(data: PreferenceCreateInput!): Preference!
  createUserMeta(data: UserMetaCreateInput!): UserMeta!
  createRSVP(data: RSVPCreateInput!): RSVP!
  createTrail(data: TrailCreateInput!): Trail!
  createRunReport(data: RunReportCreateInput!): RunReport!
  createCondition(data: ConditionCreateInput!): Condition!
  createBandaid(data: BandaidCreateInput!): Bandaid!
  createElection(data: ElectionCreateInput!): Election!
  createVote(data: VoteCreateInput!): Vote!
  createLogItem(data: LogItemCreateInput!): LogItem!
  createMembershipLogItem(data: MembershipLogItemCreateInput!): MembershipLogItem!
  createEvent(data: EventCreateInput!): Event!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  createBallot(data: BallotCreateInput!): Ballot!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateContactInfo(data: ContactInfoUpdateInput!, where: ContactInfoWhereUniqueInput!): ContactInfo
  updatePreference(data: PreferenceUpdateInput!, where: PreferenceWhereUniqueInput!): Preference
  updateUserMeta(data: UserMetaUpdateInput!, where: UserMetaWhereUniqueInput!): UserMeta
  updateRSVP(data: RSVPUpdateInput!, where: RSVPWhereUniqueInput!): RSVP
  updateTrail(data: TrailUpdateInput!, where: TrailWhereUniqueInput!): Trail
  updateRunReport(data: RunReportUpdateInput!, where: RunReportWhereUniqueInput!): RunReport
  updateCondition(data: ConditionUpdateInput!, where: ConditionWhereUniqueInput!): Condition
  updateBandaid(data: BandaidUpdateInput!, where: BandaidWhereUniqueInput!): Bandaid
  updateElection(data: ElectionUpdateInput!, where: ElectionWhereUniqueInput!): Election
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateLogItem(data: LogItemUpdateInput!, where: LogItemWhereUniqueInput!): LogItem
  updateMembershipLogItem(data: MembershipLogItemUpdateInput!, where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle
  updateBallot(data: BallotUpdateInput!, where: BallotWhereUniqueInput!): Ballot
  deleteUser(where: UserWhereUniqueInput!): User
  deleteContactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deleteUserMeta(where: UserMetaWhereUniqueInput!): UserMeta
  deleteRSVP(where: RSVPWhereUniqueInput!): RSVP
  deleteTrail(where: TrailWhereUniqueInput!): Trail
  deleteRunReport(where: RunReportWhereUniqueInput!): RunReport
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteBandaid(where: BandaidWhereUniqueInput!): Bandaid
  deleteElection(where: ElectionWhereUniqueInput!): Election
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteLogItem(where: LogItemWhereUniqueInput!): LogItem
  deleteMembershipLogItem(where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteBallot(where: BallotWhereUniqueInput!): Ballot
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertContactInfo(where: ContactInfoWhereUniqueInput!, create: ContactInfoCreateInput!, update: ContactInfoUpdateInput!): ContactInfo!
  upsertPreference(where: PreferenceWhereUniqueInput!, create: PreferenceCreateInput!, update: PreferenceUpdateInput!): Preference!
  upsertUserMeta(where: UserMetaWhereUniqueInput!, create: UserMetaCreateInput!, update: UserMetaUpdateInput!): UserMeta!
  upsertRSVP(where: RSVPWhereUniqueInput!, create: RSVPCreateInput!, update: RSVPUpdateInput!): RSVP!
  upsertTrail(where: TrailWhereUniqueInput!, create: TrailCreateInput!, update: TrailUpdateInput!): Trail!
  upsertRunReport(where: RunReportWhereUniqueInput!, create: RunReportCreateInput!, update: RunReportUpdateInput!): RunReport!
  upsertCondition(where: ConditionWhereUniqueInput!, create: ConditionCreateInput!, update: ConditionUpdateInput!): Condition!
  upsertBandaid(where: BandaidWhereUniqueInput!, create: BandaidCreateInput!, update: BandaidUpdateInput!): Bandaid!
  upsertElection(where: ElectionWhereUniqueInput!, create: ElectionCreateInput!, update: ElectionUpdateInput!): Election!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertLogItem(where: LogItemWhereUniqueInput!, create: LogItemCreateInput!, update: LogItemUpdateInput!): LogItem!
  upsertMembershipLogItem(where: MembershipLogItemWhereUniqueInput!, create: MembershipLogItemCreateInput!, update: MembershipLogItemUpdateInput!): MembershipLogItem!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertVehicle(where: VehicleWhereUniqueInput!, create: VehicleCreateInput!, update: VehicleUpdateInput!): Vehicle!
  upsertBallot(where: BallotWhereUniqueInput!, create: BallotCreateInput!, update: BallotUpdateInput!): Ballot!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyContactInfoes(data: ContactInfoUpdateManyMutationInput!, where: ContactInfoWhereInput): BatchPayload!
  updateManyPreferences(data: PreferenceUpdateManyMutationInput!, where: PreferenceWhereInput): BatchPayload!
  updateManyUserMetas(data: UserMetaUpdateManyMutationInput!, where: UserMetaWhereInput): BatchPayload!
  updateManyRSVPs(data: RSVPUpdateManyMutationInput!, where: RSVPWhereInput): BatchPayload!
  updateManyTrails(data: TrailUpdateManyMutationInput!, where: TrailWhereInput): BatchPayload!
  updateManyRunReports(data: RunReportUpdateManyMutationInput!, where: RunReportWhereInput): BatchPayload!
  updateManyConditions(data: ConditionUpdateManyMutationInput!, where: ConditionWhereInput): BatchPayload!
  updateManyBandaids(data: BandaidUpdateManyMutationInput!, where: BandaidWhereInput): BatchPayload!
  updateManyElections(data: ElectionUpdateManyMutationInput!, where: ElectionWhereInput): BatchPayload!
  updateManyLogItems(data: LogItemUpdateManyMutationInput!, where: LogItemWhereInput): BatchPayload!
  updateManyMembershipLogItems(data: MembershipLogItemUpdateManyMutationInput!, where: MembershipLogItemWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyVehicles(data: VehicleUpdateManyMutationInput!, where: VehicleWhereInput): BatchPayload!
  updateManyBallots(data: BallotUpdateManyMutationInput!, where: BallotWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyContactInfoes(where: ContactInfoWhereInput): BatchPayload!
  deleteManyPreferences(where: PreferenceWhereInput): BatchPayload!
  deleteManyUserMetas(where: UserMetaWhereInput): BatchPayload!
  deleteManyRSVPs(where: RSVPWhereInput): BatchPayload!
  deleteManyTrails(where: TrailWhereInput): BatchPayload!
  deleteManyRunReports(where: RunReportWhereInput): BatchPayload!
  deleteManyConditions(where: ConditionWhereInput): BatchPayload!
  deleteManyBandaids(where: BandaidWhereInput): BatchPayload!
  deleteManyElections(where: ElectionWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyLogItems(where: LogItemWhereInput): BatchPayload!
  deleteManyMembershipLogItems(where: MembershipLogItemWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyVehicles(where: VehicleWhereInput): BatchPayload!
  deleteManyBallots(where: BallotWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum Office {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Preference implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

"""A connection to a list of items."""
type PreferenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PreferenceEdge]!
  aggregate: AggregatePreference!
}

input PreferenceCreateInput {
  id: ID
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
  user: UserCreateOneWithoutPreferencesInput
}

input PreferenceCreateOneWithoutUserInput {
  create: PreferenceCreateWithoutUserInput
  connect: PreferenceWhereUniqueInput
}

input PreferenceCreateWithoutUserInput {
  id: ID
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

"""An edge in a connection."""
type PreferenceEdge {
  """The item at the end of the edge."""
  node: Preference!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PreferenceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emergencyContactName_ASC
  emergencyContactName_DESC
  emergencyContactPhone_ASC
  emergencyContactPhone_DESC
  photoPermissions_ASC
  photoPermissions_DESC
  showPhoneNumber_ASC
  showPhoneNumber_DESC
}

type PreferencePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

type PreferenceSubscriptionPayload {
  mutation: MutationType!
  node: Preference
  updatedFields: [String!]
  previousValues: PreferencePreviousValues
}

input PreferenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PreferenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PreferenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PreferenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PreferenceWhereInput
}

input PreferenceUpdateInput {
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
  user: UserUpdateOneWithoutPreferencesInput
}

input PreferenceUpdateManyMutationInput {
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceUpdateOneWithoutUserInput {
  create: PreferenceCreateWithoutUserInput
  connect: PreferenceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PreferenceUpdateWithoutUserDataInput
  upsert: PreferenceUpsertWithoutUserInput
}

input PreferenceUpdateWithoutUserDataInput {
  emergencyContactName: String
  emergencyContactPhone: Int
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceUpsertWithoutUserInput {
  update: PreferenceUpdateWithoutUserDataInput!
  create: PreferenceCreateWithoutUserInput!
}

input PreferenceWhereInput {
  """Logical AND on all given filters."""
  AND: [PreferenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PreferenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PreferenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emergencyContactName: String

  """All values that are not equal to given value."""
  emergencyContactName_not: String

  """All values that are contained in given list."""
  emergencyContactName_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactName_not_in: [String!]

  """All values less than the given value."""
  emergencyContactName_lt: String

  """All values less than or equal the given value."""
  emergencyContactName_lte: String

  """All values greater than the given value."""
  emergencyContactName_gt: String

  """All values greater than or equal the given value."""
  emergencyContactName_gte: String

  """All values containing the given string."""
  emergencyContactName_contains: String

  """All values not containing the given string."""
  emergencyContactName_not_contains: String

  """All values starting with the given string."""
  emergencyContactName_starts_with: String

  """All values not starting with the given string."""
  emergencyContactName_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactName_ends_with: String

  """All values not ending with the given string."""
  emergencyContactName_not_ends_with: String
  emergencyContactPhone: Int

  """All values that are not equal to given value."""
  emergencyContactPhone_not: Int

  """All values that are contained in given list."""
  emergencyContactPhone_in: [Int!]

  """All values that are not contained in given list."""
  emergencyContactPhone_not_in: [Int!]

  """All values less than the given value."""
  emergencyContactPhone_lt: Int

  """All values less than or equal the given value."""
  emergencyContactPhone_lte: Int

  """All values greater than the given value."""
  emergencyContactPhone_gt: Int

  """All values greater than or equal the given value."""
  emergencyContactPhone_gte: Int
  photoPermissions: Boolean

  """All values that are not equal to given value."""
  photoPermissions_not: Boolean
  showPhoneNumber: Boolean

  """All values that are not equal to given value."""
  showPhoneNumber_not: Boolean
  user: UserWhereInput
}

input PreferenceWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  contactInfoes(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactInfo]!
  preferences(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preference]!
  userMetas(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserMeta]!
  rSVPs(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP]!
  trails(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trail]!
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport]!
  conditions(where: ConditionWhereInput, orderBy: ConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Condition]!
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid]!
  elections(where: ElectionWhereInput, orderBy: ElectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Election]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  logItems(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogItem]!
  membershipLogItems(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  ballots(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot]!
  user(where: UserWhereUniqueInput!): User
  contactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  preference(where: PreferenceWhereUniqueInput!): Preference
  userMeta(where: UserMetaWhereUniqueInput!): UserMeta
  rSVP(where: RSVPWhereUniqueInput!): RSVP
  trail(where: TrailWhereUniqueInput!): Trail
  runReport(where: RunReportWhereUniqueInput!): RunReport
  condition(where: ConditionWhereUniqueInput!): Condition
  bandaid(where: BandaidWhereUniqueInput!): Bandaid
  election(where: ElectionWhereUniqueInput!): Election
  vote(where: VoteWhereUniqueInput!): Vote
  logItem(where: LogItemWhereUniqueInput!): LogItem
  membershipLogItem(where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  event(where: EventWhereUniqueInput!): Event
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  ballot(where: BallotWhereUniqueInput!): Ballot
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  contactInfoesConnection(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactInfoConnection!
  preferencesConnection(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreferenceConnection!
  userMetasConnection(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserMetaConnection!
  rSVPsConnection(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RSVPConnection!
  trailsConnection(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrailConnection!
  runReportsConnection(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunReportConnection!
  conditionsConnection(where: ConditionWhereInput, orderBy: ConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConditionConnection!
  bandaidsConnection(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BandaidConnection!
  electionsConnection(where: ElectionWhereInput, orderBy: ElectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ElectionConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  logItemsConnection(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogItemConnection!
  membershipLogItemsConnection(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembershipLogItemConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!
  ballotsConnection(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BallotConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  ADMIN
  OFFICER
  RUN_MASTER
  RUN_LEADER
  USER
}

type RSVP implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  member: User!
  event: Event!
  status: RSVPStatus!
}

"""A connection to a list of items."""
type RSVPConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RSVPEdge]!
  aggregate: AggregateRSVP!
}

input RSVPCreateInput {
  id: ID
  status: RSVPStatus
  member: UserCreateOneWithoutEventsRSVPdInput!
  event: EventCreateOneWithoutRsvpsInput!
}

input RSVPCreateManyWithoutEventInput {
  create: [RSVPCreateWithoutEventInput!]
  connect: [RSVPWhereUniqueInput!]
}

input RSVPCreateManyWithoutMemberInput {
  create: [RSVPCreateWithoutMemberInput!]
  connect: [RSVPWhereUniqueInput!]
}

input RSVPCreateWithoutEventInput {
  id: ID
  status: RSVPStatus
  member: UserCreateOneWithoutEventsRSVPdInput!
}

input RSVPCreateWithoutMemberInput {
  id: ID
  status: RSVPStatus
  event: EventCreateOneWithoutRsvpsInput!
}

"""An edge in a connection."""
type RSVPEdge {
  """The item at the end of the edge."""
  node: RSVP!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RSVPOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type RSVPPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: RSVPStatus!
}

input RSVPScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RSVPScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RSVPScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RSVPScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: RSVPStatus

  """All values that are not equal to given value."""
  status_not: RSVPStatus

  """All values that are contained in given list."""
  status_in: [RSVPStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RSVPStatus!]
}

enum RSVPStatus {
  NONE
  CANT_GO
  GOING
  MAYBE
}

type RSVPSubscriptionPayload {
  mutation: MutationType!
  node: RSVP
  updatedFields: [String!]
  previousValues: RSVPPreviousValues
}

input RSVPSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RSVPSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RSVPSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RSVPSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RSVPWhereInput
}

input RSVPUpdateInput {
  status: RSVPStatus
  member: UserUpdateOneRequiredWithoutEventsRSVPdInput
  event: EventUpdateOneRequiredWithoutRsvpsInput
}

input RSVPUpdateManyDataInput {
  status: RSVPStatus
}

input RSVPUpdateManyMutationInput {
  status: RSVPStatus
}

input RSVPUpdateManyWithoutEventInput {
  create: [RSVPCreateWithoutEventInput!]
  connect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  disconnect: [RSVPWhereUniqueInput!]
  delete: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RSVPUpdateManyWithWhereNestedInput!]
  deleteMany: [RSVPScalarWhereInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutEventInput!]
}

input RSVPUpdateManyWithoutMemberInput {
  create: [RSVPCreateWithoutMemberInput!]
  connect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  disconnect: [RSVPWhereUniqueInput!]
  delete: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutMemberInput!]
  updateMany: [RSVPUpdateManyWithWhereNestedInput!]
  deleteMany: [RSVPScalarWhereInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutMemberInput!]
}

input RSVPUpdateManyWithWhereNestedInput {
  where: RSVPScalarWhereInput!
  data: RSVPUpdateManyDataInput!
}

input RSVPUpdateWithoutEventDataInput {
  status: RSVPStatus
  member: UserUpdateOneRequiredWithoutEventsRSVPdInput
}

input RSVPUpdateWithoutMemberDataInput {
  status: RSVPStatus
  event: EventUpdateOneRequiredWithoutRsvpsInput
}

input RSVPUpdateWithWhereUniqueWithoutEventInput {
  where: RSVPWhereUniqueInput!
  data: RSVPUpdateWithoutEventDataInput!
}

input RSVPUpdateWithWhereUniqueWithoutMemberInput {
  where: RSVPWhereUniqueInput!
  data: RSVPUpdateWithoutMemberDataInput!
}

input RSVPUpsertWithWhereUniqueWithoutEventInput {
  where: RSVPWhereUniqueInput!
  update: RSVPUpdateWithoutEventDataInput!
  create: RSVPCreateWithoutEventInput!
}

input RSVPUpsertWithWhereUniqueWithoutMemberInput {
  where: RSVPWhereUniqueInput!
  update: RSVPUpdateWithoutMemberDataInput!
  create: RSVPCreateWithoutMemberInput!
}

input RSVPWhereInput {
  """Logical AND on all given filters."""
  AND: [RSVPWhereInput!]

  """Logical OR on all given filters."""
  OR: [RSVPWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RSVPWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: RSVPStatus

  """All values that are not equal to given value."""
  status_not: RSVPStatus

  """All values that are contained in given list."""
  status_in: [RSVPStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RSVPStatus!]
  member: UserWhereInput
  event: EventWhereInput
}

input RSVPWhereUniqueInput {
  id: ID
}

type RunReport implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: User!
  title: String!
  description: String
  trail: Trail!
  event: Event
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: Condition
  favorite: Boolean
}

"""A connection to a list of items."""
type RunReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RunReportEdge]!
  aggregate: AggregateRunReport!
}

input RunReportCreateInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
  condition: ConditionCreateOneWithoutReportInput
}

input RunReportCreateManyWithoutEventInput {
  create: [RunReportCreateWithoutEventInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateManyWithoutReporterInput {
  create: [RunReportCreateWithoutReporterInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateManyWithoutTrailInput {
  create: [RunReportCreateWithoutTrailInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateOneWithoutConditionInput {
  create: RunReportCreateWithoutConditionInput
  connect: RunReportWhereUniqueInput
}

input RunReportCreateWithoutConditionInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
}

input RunReportCreateWithoutEventInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  trail: TrailCreateOneWithoutRunReportsInput!
  condition: ConditionCreateOneWithoutReportInput
}

input RunReportCreateWithoutReporterInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
  condition: ConditionCreateOneWithoutReportInput
}

input RunReportCreateWithoutTrailInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  event: EventCreateOneWithoutRunReportsInput
  condition: ConditionCreateOneWithoutReportInput
}

"""An edge in a connection."""
type RunReportEdge {
  """The item at the end of the edge."""
  node: RunReport!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RunReportOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  reportFiled_ASC
  reportFiled_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  weather_ASC
  weather_DESC
  difficulty_ASC
  difficulty_DESC
  rating_ASC
  rating_DESC
  favorite_ASC
  favorite_DESC
}

type RunReportPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
}

input RunReportScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RunReportScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RunReportScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RunReportScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  reportFiled: DateTime

  """All values that are not equal to given value."""
  reportFiled_not: DateTime

  """All values that are contained in given list."""
  reportFiled_in: [DateTime!]

  """All values that are not contained in given list."""
  reportFiled_not_in: [DateTime!]

  """All values less than the given value."""
  reportFiled_lt: DateTime

  """All values less than or equal the given value."""
  reportFiled_lte: DateTime

  """All values greater than the given value."""
  reportFiled_gt: DateTime

  """All values greater than or equal the given value."""
  reportFiled_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  weather: String

  """All values that are not equal to given value."""
  weather_not: String

  """All values that are contained in given list."""
  weather_in: [String!]

  """All values that are not contained in given list."""
  weather_not_in: [String!]

  """All values less than the given value."""
  weather_lt: String

  """All values less than or equal the given value."""
  weather_lte: String

  """All values greater than the given value."""
  weather_gt: String

  """All values greater than or equal the given value."""
  weather_gte: String

  """All values containing the given string."""
  weather_contains: String

  """All values not containing the given string."""
  weather_not_contains: String

  """All values starting with the given string."""
  weather_starts_with: String

  """All values not starting with the given string."""
  weather_not_starts_with: String

  """All values ending with the given string."""
  weather_ends_with: String

  """All values not ending with the given string."""
  weather_not_ends_with: String
  difficulty: TrailDifficulty

  """All values that are not equal to given value."""
  difficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  difficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  difficulty_not_in: [TrailDifficulty!]
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  favorite: Boolean

  """All values that are not equal to given value."""
  favorite_not: Boolean
}

type RunReportSubscriptionPayload {
  mutation: MutationType!
  node: RunReport
  updatedFields: [String!]
  previousValues: RunReportPreviousValues
}

input RunReportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RunReportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RunReportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RunReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RunReportWhereInput
}

input RunReportUpdateInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
  condition: ConditionUpdateOneWithoutReportInput
}

input RunReportUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
}

input RunReportUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
}

input RunReportUpdateManyWithoutEventInput {
  create: [RunReportCreateWithoutEventInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  delete: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
  deleteMany: [RunReportScalarWhereInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutEventInput!]
}

input RunReportUpdateManyWithoutReporterInput {
  create: [RunReportCreateWithoutReporterInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  delete: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutReporterInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
  deleteMany: [RunReportScalarWhereInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutReporterInput!]
}

input RunReportUpdateManyWithoutTrailInput {
  create: [RunReportCreateWithoutTrailInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  delete: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutTrailInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
  deleteMany: [RunReportScalarWhereInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutTrailInput!]
}

input RunReportUpdateManyWithWhereNestedInput {
  where: RunReportScalarWhereInput!
  data: RunReportUpdateManyDataInput!
}

input RunReportUpdateOneRequiredWithoutConditionInput {
  create: RunReportCreateWithoutConditionInput
  connect: RunReportWhereUniqueInput
  update: RunReportUpdateWithoutConditionDataInput
  upsert: RunReportUpsertWithoutConditionInput
}

input RunReportUpdateWithoutConditionDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
}

input RunReportUpdateWithoutEventDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  condition: ConditionUpdateOneWithoutReportInput
}

input RunReportUpdateWithoutReporterDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
  condition: ConditionUpdateOneWithoutReportInput
}

input RunReportUpdateWithoutTrailDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  event: EventUpdateOneWithoutRunReportsInput
  condition: ConditionUpdateOneWithoutReportInput
}

input RunReportUpdateWithWhereUniqueWithoutEventInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutEventDataInput!
}

input RunReportUpdateWithWhereUniqueWithoutReporterInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutReporterDataInput!
}

input RunReportUpdateWithWhereUniqueWithoutTrailInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutTrailDataInput!
}

input RunReportUpsertWithoutConditionInput {
  update: RunReportUpdateWithoutConditionDataInput!
  create: RunReportCreateWithoutConditionInput!
}

input RunReportUpsertWithWhereUniqueWithoutEventInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutEventDataInput!
  create: RunReportCreateWithoutEventInput!
}

input RunReportUpsertWithWhereUniqueWithoutReporterInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutReporterDataInput!
  create: RunReportCreateWithoutReporterInput!
}

input RunReportUpsertWithWhereUniqueWithoutTrailInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutTrailDataInput!
  create: RunReportCreateWithoutTrailInput!
}

input RunReportWhereInput {
  """Logical AND on all given filters."""
  AND: [RunReportWhereInput!]

  """Logical OR on all given filters."""
  OR: [RunReportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RunReportWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  reportFiled: DateTime

  """All values that are not equal to given value."""
  reportFiled_not: DateTime

  """All values that are contained in given list."""
  reportFiled_in: [DateTime!]

  """All values that are not contained in given list."""
  reportFiled_not_in: [DateTime!]

  """All values less than the given value."""
  reportFiled_lt: DateTime

  """All values less than or equal the given value."""
  reportFiled_lte: DateTime

  """All values greater than the given value."""
  reportFiled_gt: DateTime

  """All values greater than or equal the given value."""
  reportFiled_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  weather: String

  """All values that are not equal to given value."""
  weather_not: String

  """All values that are contained in given list."""
  weather_in: [String!]

  """All values that are not contained in given list."""
  weather_not_in: [String!]

  """All values less than the given value."""
  weather_lt: String

  """All values less than or equal the given value."""
  weather_lte: String

  """All values greater than the given value."""
  weather_gt: String

  """All values greater than or equal the given value."""
  weather_gte: String

  """All values containing the given string."""
  weather_contains: String

  """All values not containing the given string."""
  weather_not_contains: String

  """All values starting with the given string."""
  weather_starts_with: String

  """All values not starting with the given string."""
  weather_not_starts_with: String

  """All values ending with the given string."""
  weather_ends_with: String

  """All values not ending with the given string."""
  weather_not_ends_with: String
  difficulty: TrailDifficulty

  """All values that are not equal to given value."""
  difficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  difficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  difficulty_not_in: [TrailDifficulty!]
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  favorite: Boolean

  """All values that are not equal to given value."""
  favorite_not: Boolean
  reporter: UserWhereInput
  trail: TrailWhereInput
  event: EventWhereInput
  condition: ConditionWhereInput
}

input RunReportWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  contactInfo(where: ContactInfoSubscriptionWhereInput): ContactInfoSubscriptionPayload
  preference(where: PreferenceSubscriptionWhereInput): PreferenceSubscriptionPayload
  userMeta(where: UserMetaSubscriptionWhereInput): UserMetaSubscriptionPayload
  rSVP(where: RSVPSubscriptionWhereInput): RSVPSubscriptionPayload
  trail(where: TrailSubscriptionWhereInput): TrailSubscriptionPayload
  runReport(where: RunReportSubscriptionWhereInput): RunReportSubscriptionPayload
  condition(where: ConditionSubscriptionWhereInput): ConditionSubscriptionPayload
  bandaid(where: BandaidSubscriptionWhereInput): BandaidSubscriptionPayload
  election(where: ElectionSubscriptionWhereInput): ElectionSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  logItem(where: LogItemSubscriptionWhereInput): LogItemSubscriptionPayload
  membershipLogItem(where: MembershipLogItemSubscriptionWhereInput): MembershipLogItemSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  vehicle(where: VehicleSubscriptionWhereInput): VehicleSubscriptionPayload
  ballot(where: BallotSubscriptionWhereInput): BallotSubscriptionPayload
}

enum Title {
  WEBMASTER
  CHARTER_MEMBER
}

type Trail implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  visitors(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
}

enum TrailCondition {
  CLEAR
  MINOR_ISSUES
  MAJOR_ISSUES
  CLOSED
}

"""A connection to a list of items."""
type TrailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrailEdge]!
  aggregate: AggregateTrail!
}

input TrailCreateInput {
  id: ID
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  visitors: UserCreateManyWithoutTrailsVisitedInput
  runReports: RunReportCreateManyWithoutTrailInput
}

input TrailCreateManyWithoutVisitorsInput {
  create: [TrailCreateWithoutVisitorsInput!]
  connect: [TrailWhereUniqueInput!]
}

input TrailCreateOneWithoutPastEventsInput {
  create: TrailCreateWithoutPastEventsInput
  connect: TrailWhereUniqueInput
}

input TrailCreateOneWithoutRunReportsInput {
  create: TrailCreateWithoutRunReportsInput
  connect: TrailWhereUniqueInput
}

input TrailCreateWithoutPastEventsInput {
  id: ID
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  visitors: UserCreateManyWithoutTrailsVisitedInput
  runReports: RunReportCreateManyWithoutTrailInput
}

input TrailCreateWithoutRunReportsInput {
  id: ID
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  visitors: UserCreateManyWithoutTrailsVisitedInput
}

input TrailCreateWithoutVisitorsInput {
  id: ID
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  runReports: RunReportCreateManyWithoutTrailInput
}

enum TrailDifficulty {
  UNKNOWN
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

"""An edge in a connection."""
type TrailEdge {
  """The item at the end of the edge."""
  node: Trail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TrailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  trailheadCoords_ASC
  trailheadCoords_DESC
  address_ASC
  address_DESC
  avgDifficulty_ASC
  avgDifficulty_DESC
  avgRatings_ASC
  avgRatings_DESC
  currentConditions_ASC
  currentConditions_DESC
  conditionsLastReported_ASC
  conditionsLastReported_DESC
  favoriteCount_ASC
  favoriteCount_DESC
}

type TrailPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TrailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  trailheadCoords: String

  """All values that are not equal to given value."""
  trailheadCoords_not: String

  """All values that are contained in given list."""
  trailheadCoords_in: [String!]

  """All values that are not contained in given list."""
  trailheadCoords_not_in: [String!]

  """All values less than the given value."""
  trailheadCoords_lt: String

  """All values less than or equal the given value."""
  trailheadCoords_lte: String

  """All values greater than the given value."""
  trailheadCoords_gt: String

  """All values greater than or equal the given value."""
  trailheadCoords_gte: String

  """All values containing the given string."""
  trailheadCoords_contains: String

  """All values not containing the given string."""
  trailheadCoords_not_contains: String

  """All values starting with the given string."""
  trailheadCoords_starts_with: String

  """All values not starting with the given string."""
  trailheadCoords_not_starts_with: String

  """All values ending with the given string."""
  trailheadCoords_ends_with: String

  """All values not ending with the given string."""
  trailheadCoords_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  avgDifficulty: TrailDifficulty

  """All values that are not equal to given value."""
  avgDifficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  avgDifficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  avgDifficulty_not_in: [TrailDifficulty!]
  avgRatings: Float

  """All values that are not equal to given value."""
  avgRatings_not: Float

  """All values that are contained in given list."""
  avgRatings_in: [Float!]

  """All values that are not contained in given list."""
  avgRatings_not_in: [Float!]

  """All values less than the given value."""
  avgRatings_lt: Float

  """All values less than or equal the given value."""
  avgRatings_lte: Float

  """All values greater than the given value."""
  avgRatings_gt: Float

  """All values greater than or equal the given value."""
  avgRatings_gte: Float
  currentConditions: String

  """All values that are not equal to given value."""
  currentConditions_not: String

  """All values that are contained in given list."""
  currentConditions_in: [String!]

  """All values that are not contained in given list."""
  currentConditions_not_in: [String!]

  """All values less than the given value."""
  currentConditions_lt: String

  """All values less than or equal the given value."""
  currentConditions_lte: String

  """All values greater than the given value."""
  currentConditions_gt: String

  """All values greater than or equal the given value."""
  currentConditions_gte: String

  """All values containing the given string."""
  currentConditions_contains: String

  """All values not containing the given string."""
  currentConditions_not_contains: String

  """All values starting with the given string."""
  currentConditions_starts_with: String

  """All values not starting with the given string."""
  currentConditions_not_starts_with: String

  """All values ending with the given string."""
  currentConditions_ends_with: String

  """All values not ending with the given string."""
  currentConditions_not_ends_with: String
  conditionsLastReported: DateTime

  """All values that are not equal to given value."""
  conditionsLastReported_not: DateTime

  """All values that are contained in given list."""
  conditionsLastReported_in: [DateTime!]

  """All values that are not contained in given list."""
  conditionsLastReported_not_in: [DateTime!]

  """All values less than the given value."""
  conditionsLastReported_lt: DateTime

  """All values less than or equal the given value."""
  conditionsLastReported_lte: DateTime

  """All values greater than the given value."""
  conditionsLastReported_gt: DateTime

  """All values greater than or equal the given value."""
  conditionsLastReported_gte: DateTime
  favoriteCount: Int

  """All values that are not equal to given value."""
  favoriteCount_not: Int

  """All values that are contained in given list."""
  favoriteCount_in: [Int!]

  """All values that are not contained in given list."""
  favoriteCount_not_in: [Int!]

  """All values less than the given value."""
  favoriteCount_lt: Int

  """All values less than or equal the given value."""
  favoriteCount_lte: Int

  """All values greater than the given value."""
  favoriteCount_gt: Int

  """All values greater than or equal the given value."""
  favoriteCount_gte: Int
}

type TrailSubscriptionPayload {
  mutation: MutationType!
  node: Trail
  updatedFields: [String!]
  previousValues: TrailPreviousValues
}

input TrailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TrailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TrailWhereInput
}

input TrailUpdateInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  visitors: UserUpdateManyWithoutTrailsVisitedInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateManyDataInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailUpdateManyMutationInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailUpdateManyWithoutVisitorsInput {
  create: [TrailCreateWithoutVisitorsInput!]
  connect: [TrailWhereUniqueInput!]
  set: [TrailWhereUniqueInput!]
  disconnect: [TrailWhereUniqueInput!]
  delete: [TrailWhereUniqueInput!]
  update: [TrailUpdateWithWhereUniqueWithoutVisitorsInput!]
  updateMany: [TrailUpdateManyWithWhereNestedInput!]
  deleteMany: [TrailScalarWhereInput!]
  upsert: [TrailUpsertWithWhereUniqueWithoutVisitorsInput!]
}

input TrailUpdateManyWithWhereNestedInput {
  where: TrailScalarWhereInput!
  data: TrailUpdateManyDataInput!
}

input TrailUpdateOneRequiredWithoutRunReportsInput {
  create: TrailCreateWithoutRunReportsInput
  connect: TrailWhereUniqueInput
  update: TrailUpdateWithoutRunReportsDataInput
  upsert: TrailUpsertWithoutRunReportsInput
}

input TrailUpdateOneWithoutPastEventsInput {
  create: TrailCreateWithoutPastEventsInput
  connect: TrailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TrailUpdateWithoutPastEventsDataInput
  upsert: TrailUpsertWithoutPastEventsInput
}

input TrailUpdateWithoutPastEventsDataInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  visitors: UserUpdateManyWithoutTrailsVisitedInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateWithoutRunReportsDataInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  visitors: UserUpdateManyWithoutTrailsVisitedInput
}

input TrailUpdateWithoutVisitorsDataInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateWithWhereUniqueWithoutVisitorsInput {
  where: TrailWhereUniqueInput!
  data: TrailUpdateWithoutVisitorsDataInput!
}

input TrailUpsertWithoutPastEventsInput {
  update: TrailUpdateWithoutPastEventsDataInput!
  create: TrailCreateWithoutPastEventsInput!
}

input TrailUpsertWithoutRunReportsInput {
  update: TrailUpdateWithoutRunReportsDataInput!
  create: TrailCreateWithoutRunReportsInput!
}

input TrailUpsertWithWhereUniqueWithoutVisitorsInput {
  where: TrailWhereUniqueInput!
  update: TrailUpdateWithoutVisitorsDataInput!
  create: TrailCreateWithoutVisitorsInput!
}

input TrailWhereInput {
  """Logical AND on all given filters."""
  AND: [TrailWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  trailheadCoords: String

  """All values that are not equal to given value."""
  trailheadCoords_not: String

  """All values that are contained in given list."""
  trailheadCoords_in: [String!]

  """All values that are not contained in given list."""
  trailheadCoords_not_in: [String!]

  """All values less than the given value."""
  trailheadCoords_lt: String

  """All values less than or equal the given value."""
  trailheadCoords_lte: String

  """All values greater than the given value."""
  trailheadCoords_gt: String

  """All values greater than or equal the given value."""
  trailheadCoords_gte: String

  """All values containing the given string."""
  trailheadCoords_contains: String

  """All values not containing the given string."""
  trailheadCoords_not_contains: String

  """All values starting with the given string."""
  trailheadCoords_starts_with: String

  """All values not starting with the given string."""
  trailheadCoords_not_starts_with: String

  """All values ending with the given string."""
  trailheadCoords_ends_with: String

  """All values not ending with the given string."""
  trailheadCoords_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  avgDifficulty: TrailDifficulty

  """All values that are not equal to given value."""
  avgDifficulty_not: TrailDifficulty

  """All values that are contained in given list."""
  avgDifficulty_in: [TrailDifficulty!]

  """All values that are not contained in given list."""
  avgDifficulty_not_in: [TrailDifficulty!]
  avgRatings: Float

  """All values that are not equal to given value."""
  avgRatings_not: Float

  """All values that are contained in given list."""
  avgRatings_in: [Float!]

  """All values that are not contained in given list."""
  avgRatings_not_in: [Float!]

  """All values less than the given value."""
  avgRatings_lt: Float

  """All values less than or equal the given value."""
  avgRatings_lte: Float

  """All values greater than the given value."""
  avgRatings_gt: Float

  """All values greater than or equal the given value."""
  avgRatings_gte: Float
  currentConditions: String

  """All values that are not equal to given value."""
  currentConditions_not: String

  """All values that are contained in given list."""
  currentConditions_in: [String!]

  """All values that are not contained in given list."""
  currentConditions_not_in: [String!]

  """All values less than the given value."""
  currentConditions_lt: String

  """All values less than or equal the given value."""
  currentConditions_lte: String

  """All values greater than the given value."""
  currentConditions_gt: String

  """All values greater than or equal the given value."""
  currentConditions_gte: String

  """All values containing the given string."""
  currentConditions_contains: String

  """All values not containing the given string."""
  currentConditions_not_contains: String

  """All values starting with the given string."""
  currentConditions_starts_with: String

  """All values not starting with the given string."""
  currentConditions_not_starts_with: String

  """All values ending with the given string."""
  currentConditions_ends_with: String

  """All values not ending with the given string."""
  currentConditions_not_ends_with: String
  conditionsLastReported: DateTime

  """All values that are not equal to given value."""
  conditionsLastReported_not: DateTime

  """All values that are contained in given list."""
  conditionsLastReported_in: [DateTime!]

  """All values that are not contained in given list."""
  conditionsLastReported_not_in: [DateTime!]

  """All values less than the given value."""
  conditionsLastReported_lt: DateTime

  """All values less than or equal the given value."""
  conditionsLastReported_lte: DateTime

  """All values greater than the given value."""
  conditionsLastReported_gt: DateTime

  """All values greater than or equal the given value."""
  conditionsLastReported_gte: DateTime
  favoriteCount: Int

  """All values that are not equal to given value."""
  favoriteCount_not: Int

  """All values that are contained in given list."""
  favoriteCount_in: [Int!]

  """All values that are not contained in given list."""
  favoriteCount_not_in: [Int!]

  """All values less than the given value."""
  favoriteCount_lt: Int

  """All values less than or equal the given value."""
  favoriteCount_lte: Int

  """All values greater than the given value."""
  favoriteCount_gt: Int

  """All values greater than or equal the given value."""
  favoriteCount_gte: Int
  pastEvents_every: EventWhereInput
  pastEvents_some: EventWhereInput
  pastEvents_none: EventWhereInput
  visitors_every: UserWhereInput
  visitors_some: UserWhereInput
  visitors_none: UserWhereInput
  runReports_every: RunReportWhereInput
  runReports_some: RunReportWhereInput
  runReports_none: RunReportWhereInput
}

input TrailWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfo
  preferences: Preference
  userMeta: UserMeta
  avatarSmall: String
  isCharterMember: Boolean
  vehicle: Vehicle
  title: Title
  role: Role!
  accountStatus: AccountStatus!
  accountType: AccountType!
  office: Office
  candidateFor(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot!]
  votesReceived(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  votedFor(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  comfortLevel: String
  log(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogItem!]
  membershipLog(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem!]
  membershipLogContributions(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem!]
  eventsCreated(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  eventsRSVPd(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP!]
  eventsHosted(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  trailsVisited(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trail!]
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid!]
  runReportsLogged(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateManyWithoutCandidateForInput {
  create: [UserCreateWithoutCandidateForInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTrailsVisitedInput {
  create: [UserCreateWithoutTrailsVisitedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutBandaidsInput {
  create: UserCreateWithoutBandaidsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContactInfoInput {
  create: UserCreateWithoutContactInfoInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsCreatedInput {
  create: UserCreateWithoutEventsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsHostedInput {
  create: UserCreateWithoutEventsHostedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsRSVPdInput {
  create: UserCreateWithoutEventsRSVPdInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogInput {
  create: UserCreateWithoutLogInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembershipLogContributionsInput {
  create: UserCreateWithoutMembershipLogContributionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembershipLogInput {
  create: UserCreateWithoutMembershipLogInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRunReportsLoggedInput {
  create: UserCreateWithoutRunReportsLoggedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotedForInput {
  create: UserCreateWithoutVotedForInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesReceivedInput {
  create: UserCreateWithoutVotesReceivedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBandaidsInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutCandidateForInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutContactInfoInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsCreatedInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsHostedInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsRSVPdInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutLogInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutMembershipLogContributionsInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutMembershipLogInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutPreferencesInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutRunReportsLoggedInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
}

input UserCreateWithoutTrailsVisitedInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutUserMetaInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutVotedForInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutVotesReceivedInput {
  id: ID
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  vehicle: VehicleCreateOneInput
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votedFor: VoteCreateManyWithoutVoterInput
  log: LogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutInitiatorInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserMeta implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
}

"""A connection to a list of items."""
type UserMetaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserMetaEdge]!
  aggregate: AggregateUserMeta!
}

input UserMetaCreateInput {
  id: ID
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
  user: UserCreateOneWithoutUserMetaInput
}

input UserMetaCreateOneWithoutUserInput {
  create: UserMetaCreateWithoutUserInput
  connect: UserMetaWhereUniqueInput
}

input UserMetaCreateWithoutUserInput {
  id: ID
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
}

"""An edge in a connection."""
type UserMetaEdge {
  """The item at the end of the edge."""
  node: UserMeta!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserMetaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emailVerified_ASC
  emailVerified_DESC
  oldSitemigrationComplete_ASC
  oldSitemigrationComplete_DESC
}

type UserMetaPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
}

type UserMetaSubscriptionPayload {
  mutation: MutationType!
  node: UserMeta
  updatedFields: [String!]
  previousValues: UserMetaPreviousValues
}

input UserMetaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserMetaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserMetaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserMetaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserMetaWhereInput
}

input UserMetaUpdateInput {
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
  user: UserUpdateOneWithoutUserMetaInput
}

input UserMetaUpdateManyMutationInput {
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaUpdateOneWithoutUserInput {
  create: UserMetaCreateWithoutUserInput
  connect: UserMetaWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserMetaUpdateWithoutUserDataInput
  upsert: UserMetaUpsertWithoutUserInput
}

input UserMetaUpdateWithoutUserDataInput {
  emailVerified: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaUpsertWithoutUserInput {
  update: UserMetaUpdateWithoutUserDataInput!
  create: UserMetaCreateWithoutUserInput!
}

input UserMetaWhereInput {
  """Logical AND on all given filters."""
  AND: [UserMetaWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserMetaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserMetaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  oldSitemigrationComplete: Boolean

  """All values that are not equal to given value."""
  oldSitemigrationComplete_not: Boolean
  user: UserWhereInput
}

input UserMetaWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  joined_ASC
  joined_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  birthdate_ASC
  birthdate_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  avatarSmall_ASC
  avatarSmall_DESC
  isCharterMember_ASC
  isCharterMember_DESC
  title_ASC
  title_DESC
  role_ASC
  role_DESC
  accountStatus_ASC
  accountStatus_DESC
  accountType_ASC
  accountType_DESC
  office_ASC
  office_DESC
  comfortLevel_ASC
  comfortLevel_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  joined: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role!
  accountStatus: AccountStatus!
  accountType: AccountType!
  office: Office
  comfortLevel: String
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  joined: DateTime

  """All values that are not equal to given value."""
  joined_not: DateTime

  """All values that are contained in given list."""
  joined_in: [DateTime!]

  """All values that are not contained in given list."""
  joined_not_in: [DateTime!]

  """All values less than the given value."""
  joined_lt: DateTime

  """All values less than or equal the given value."""
  joined_lte: DateTime

  """All values greater than the given value."""
  joined_gt: DateTime

  """All values greater than or equal the given value."""
  joined_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  birthdate: DateTime

  """All values that are not equal to given value."""
  birthdate_not: DateTime

  """All values that are contained in given list."""
  birthdate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthdate_not_in: [DateTime!]

  """All values less than the given value."""
  birthdate_lt: DateTime

  """All values less than or equal the given value."""
  birthdate_lte: DateTime

  """All values greater than the given value."""
  birthdate_gt: DateTime

  """All values greater than or equal the given value."""
  birthdate_gte: DateTime
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  avatarSmall: String

  """All values that are not equal to given value."""
  avatarSmall_not: String

  """All values that are contained in given list."""
  avatarSmall_in: [String!]

  """All values that are not contained in given list."""
  avatarSmall_not_in: [String!]

  """All values less than the given value."""
  avatarSmall_lt: String

  """All values less than or equal the given value."""
  avatarSmall_lte: String

  """All values greater than the given value."""
  avatarSmall_gt: String

  """All values greater than or equal the given value."""
  avatarSmall_gte: String

  """All values containing the given string."""
  avatarSmall_contains: String

  """All values not containing the given string."""
  avatarSmall_not_contains: String

  """All values starting with the given string."""
  avatarSmall_starts_with: String

  """All values not starting with the given string."""
  avatarSmall_not_starts_with: String

  """All values ending with the given string."""
  avatarSmall_ends_with: String

  """All values not ending with the given string."""
  avatarSmall_not_ends_with: String
  isCharterMember: Boolean

  """All values that are not equal to given value."""
  isCharterMember_not: Boolean
  title: Title

  """All values that are not equal to given value."""
  title_not: Title

  """All values that are contained in given list."""
  title_in: [Title!]

  """All values that are not contained in given list."""
  title_not_in: [Title!]
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  accountStatus: AccountStatus

  """All values that are not equal to given value."""
  accountStatus_not: AccountStatus

  """All values that are contained in given list."""
  accountStatus_in: [AccountStatus!]

  """All values that are not contained in given list."""
  accountStatus_not_in: [AccountStatus!]
  accountType: AccountType

  """All values that are not equal to given value."""
  accountType_not: AccountType

  """All values that are contained in given list."""
  accountType_in: [AccountType!]

  """All values that are not contained in given list."""
  accountType_not_in: [AccountType!]
  office: Office

  """All values that are not equal to given value."""
  office_not: Office

  """All values that are contained in given list."""
  office_in: [Office!]

  """All values that are not contained in given list."""
  office_not_in: [Office!]
  comfortLevel: String

  """All values that are not equal to given value."""
  comfortLevel_not: String

  """All values that are contained in given list."""
  comfortLevel_in: [String!]

  """All values that are not contained in given list."""
  comfortLevel_not_in: [String!]

  """All values less than the given value."""
  comfortLevel_lt: String

  """All values less than or equal the given value."""
  comfortLevel_lte: String

  """All values greater than the given value."""
  comfortLevel_gt: String

  """All values greater than or equal the given value."""
  comfortLevel_gte: String

  """All values containing the given string."""
  comfortLevel_contains: String

  """All values not containing the given string."""
  comfortLevel_not_contains: String

  """All values starting with the given string."""
  comfortLevel_starts_with: String

  """All values not starting with the given string."""
  comfortLevel_not_starts_with: String

  """All values ending with the given string."""
  comfortLevel_ends_with: String

  """All values not ending with the given string."""
  comfortLevel_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateManyDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
}

input UserUpdateManyMutationInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
}

input UserUpdateManyWithoutCandidateForInput {
  create: [UserCreateWithoutCandidateForInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCandidateForInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCandidateForInput!]
}

input UserUpdateManyWithoutTrailsVisitedInput {
  create: [UserCreateWithoutTrailsVisitedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTrailsVisitedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTrailsVisitedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutEventsCreatedInput {
  create: UserCreateWithoutEventsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEventsCreatedDataInput
  upsert: UserUpsertWithoutEventsCreatedInput
}

input UserUpdateOneRequiredWithoutEventsRSVPdInput {
  create: UserCreateWithoutEventsRSVPdInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEventsRSVPdDataInput
  upsert: UserUpsertWithoutEventsRSVPdInput
}

input UserUpdateOneRequiredWithoutLogInput {
  create: UserCreateWithoutLogInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutLogDataInput
  upsert: UserUpsertWithoutLogInput
}

input UserUpdateOneRequiredWithoutMembershipLogContributionsInput {
  create: UserCreateWithoutMembershipLogContributionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMembershipLogContributionsDataInput
  upsert: UserUpsertWithoutMembershipLogContributionsInput
}

input UserUpdateOneRequiredWithoutMembershipLogInput {
  create: UserCreateWithoutMembershipLogInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMembershipLogDataInput
  upsert: UserUpsertWithoutMembershipLogInput
}

input UserUpdateOneRequiredWithoutRunReportsLoggedInput {
  create: UserCreateWithoutRunReportsLoggedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRunReportsLoggedDataInput
  upsert: UserUpsertWithoutRunReportsLoggedInput
}

input UserUpdateOneRequiredWithoutVotedForInput {
  create: UserCreateWithoutVotedForInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVotedForDataInput
  upsert: UserUpsertWithoutVotedForInput
}

input UserUpdateOneWithoutBandaidsInput {
  create: UserCreateWithoutBandaidsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBandaidsDataInput
  upsert: UserUpsertWithoutBandaidsInput
}

input UserUpdateOneWithoutContactInfoInput {
  create: UserCreateWithoutContactInfoInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutContactInfoDataInput
  upsert: UserUpsertWithoutContactInfoInput
}

input UserUpdateOneWithoutEventsHostedInput {
  create: UserCreateWithoutEventsHostedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventsHostedDataInput
  upsert: UserUpsertWithoutEventsHostedInput
}

input UserUpdateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPreferencesDataInput
  upsert: UserUpsertWithoutPreferencesInput
}

input UserUpdateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutUserMetaDataInput
  upsert: UserUpsertWithoutUserMetaInput
}

input UserUpdateOneWithoutVotesReceivedInput {
  create: UserCreateWithoutVotesReceivedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutVotesReceivedDataInput
  upsert: UserUpsertWithoutVotesReceivedInput
}

input UserUpdateWithoutBandaidsDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutCandidateForDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutContactInfoDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsCreatedDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsHostedDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsRSVPdDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutLogDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutMembershipLogContributionsDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutMembershipLogDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutPreferencesDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutRunReportsLoggedDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
}

input UserUpdateWithoutTrailsVisitedDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutUserMetaDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutVotedForDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutVotesReceivedDataInput {
  joined: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  avatarSmall: String
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  vehicle: VehicleUpdateOneInput
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votedFor: VoteUpdateManyWithoutVoterInput
  log: LogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutInitiatorInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithWhereUniqueWithoutCandidateForInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCandidateForDataInput!
}

input UserUpdateWithWhereUniqueWithoutTrailsVisitedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTrailsVisitedDataInput!
}

input UserUpsertWithoutBandaidsInput {
  update: UserUpdateWithoutBandaidsDataInput!
  create: UserCreateWithoutBandaidsInput!
}

input UserUpsertWithoutContactInfoInput {
  update: UserUpdateWithoutContactInfoDataInput!
  create: UserCreateWithoutContactInfoInput!
}

input UserUpsertWithoutEventsCreatedInput {
  update: UserUpdateWithoutEventsCreatedDataInput!
  create: UserCreateWithoutEventsCreatedInput!
}

input UserUpsertWithoutEventsHostedInput {
  update: UserUpdateWithoutEventsHostedDataInput!
  create: UserCreateWithoutEventsHostedInput!
}

input UserUpsertWithoutEventsRSVPdInput {
  update: UserUpdateWithoutEventsRSVPdDataInput!
  create: UserCreateWithoutEventsRSVPdInput!
}

input UserUpsertWithoutLogInput {
  update: UserUpdateWithoutLogDataInput!
  create: UserCreateWithoutLogInput!
}

input UserUpsertWithoutMembershipLogContributionsInput {
  update: UserUpdateWithoutMembershipLogContributionsDataInput!
  create: UserCreateWithoutMembershipLogContributionsInput!
}

input UserUpsertWithoutMembershipLogInput {
  update: UserUpdateWithoutMembershipLogDataInput!
  create: UserCreateWithoutMembershipLogInput!
}

input UserUpsertWithoutPreferencesInput {
  update: UserUpdateWithoutPreferencesDataInput!
  create: UserCreateWithoutPreferencesInput!
}

input UserUpsertWithoutRunReportsLoggedInput {
  update: UserUpdateWithoutRunReportsLoggedDataInput!
  create: UserCreateWithoutRunReportsLoggedInput!
}

input UserUpsertWithoutUserMetaInput {
  update: UserUpdateWithoutUserMetaDataInput!
  create: UserCreateWithoutUserMetaInput!
}

input UserUpsertWithoutVotedForInput {
  update: UserUpdateWithoutVotedForDataInput!
  create: UserCreateWithoutVotedForInput!
}

input UserUpsertWithoutVotesReceivedInput {
  update: UserUpdateWithoutVotesReceivedDataInput!
  create: UserCreateWithoutVotesReceivedInput!
}

input UserUpsertWithWhereUniqueWithoutCandidateForInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCandidateForDataInput!
  create: UserCreateWithoutCandidateForInput!
}

input UserUpsertWithWhereUniqueWithoutTrailsVisitedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTrailsVisitedDataInput!
  create: UserCreateWithoutTrailsVisitedInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  joined: DateTime

  """All values that are not equal to given value."""
  joined_not: DateTime

  """All values that are contained in given list."""
  joined_in: [DateTime!]

  """All values that are not contained in given list."""
  joined_not_in: [DateTime!]

  """All values less than the given value."""
  joined_lt: DateTime

  """All values less than or equal the given value."""
  joined_lte: DateTime

  """All values greater than the given value."""
  joined_gt: DateTime

  """All values greater than or equal the given value."""
  joined_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  birthdate: DateTime

  """All values that are not equal to given value."""
  birthdate_not: DateTime

  """All values that are contained in given list."""
  birthdate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthdate_not_in: [DateTime!]

  """All values less than the given value."""
  birthdate_lt: DateTime

  """All values less than or equal the given value."""
  birthdate_lte: DateTime

  """All values greater than the given value."""
  birthdate_gt: DateTime

  """All values greater than or equal the given value."""
  birthdate_gte: DateTime
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  avatarSmall: String

  """All values that are not equal to given value."""
  avatarSmall_not: String

  """All values that are contained in given list."""
  avatarSmall_in: [String!]

  """All values that are not contained in given list."""
  avatarSmall_not_in: [String!]

  """All values less than the given value."""
  avatarSmall_lt: String

  """All values less than or equal the given value."""
  avatarSmall_lte: String

  """All values greater than the given value."""
  avatarSmall_gt: String

  """All values greater than or equal the given value."""
  avatarSmall_gte: String

  """All values containing the given string."""
  avatarSmall_contains: String

  """All values not containing the given string."""
  avatarSmall_not_contains: String

  """All values starting with the given string."""
  avatarSmall_starts_with: String

  """All values not starting with the given string."""
  avatarSmall_not_starts_with: String

  """All values ending with the given string."""
  avatarSmall_ends_with: String

  """All values not ending with the given string."""
  avatarSmall_not_ends_with: String
  isCharterMember: Boolean

  """All values that are not equal to given value."""
  isCharterMember_not: Boolean
  title: Title

  """All values that are not equal to given value."""
  title_not: Title

  """All values that are contained in given list."""
  title_in: [Title!]

  """All values that are not contained in given list."""
  title_not_in: [Title!]
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  accountStatus: AccountStatus

  """All values that are not equal to given value."""
  accountStatus_not: AccountStatus

  """All values that are contained in given list."""
  accountStatus_in: [AccountStatus!]

  """All values that are not contained in given list."""
  accountStatus_not_in: [AccountStatus!]
  accountType: AccountType

  """All values that are not equal to given value."""
  accountType_not: AccountType

  """All values that are contained in given list."""
  accountType_in: [AccountType!]

  """All values that are not contained in given list."""
  accountType_not_in: [AccountType!]
  office: Office

  """All values that are not equal to given value."""
  office_not: Office

  """All values that are contained in given list."""
  office_in: [Office!]

  """All values that are not contained in given list."""
  office_not_in: [Office!]
  comfortLevel: String

  """All values that are not equal to given value."""
  comfortLevel_not: String

  """All values that are contained in given list."""
  comfortLevel_in: [String!]

  """All values that are not contained in given list."""
  comfortLevel_not_in: [String!]

  """All values less than the given value."""
  comfortLevel_lt: String

  """All values less than or equal the given value."""
  comfortLevel_lte: String

  """All values greater than the given value."""
  comfortLevel_gt: String

  """All values greater than or equal the given value."""
  comfortLevel_gte: String

  """All values containing the given string."""
  comfortLevel_contains: String

  """All values not containing the given string."""
  comfortLevel_not_contains: String

  """All values starting with the given string."""
  comfortLevel_starts_with: String

  """All values not starting with the given string."""
  comfortLevel_not_starts_with: String

  """All values ending with the given string."""
  comfortLevel_ends_with: String

  """All values not ending with the given string."""
  comfortLevel_not_ends_with: String
  contactInfo: ContactInfoWhereInput
  preferences: PreferenceWhereInput
  userMeta: UserMetaWhereInput
  vehicle: VehicleWhereInput
  candidateFor_every: BallotWhereInput
  candidateFor_some: BallotWhereInput
  candidateFor_none: BallotWhereInput
  votesReceived_every: VoteWhereInput
  votesReceived_some: VoteWhereInput
  votesReceived_none: VoteWhereInput
  votedFor_every: VoteWhereInput
  votedFor_some: VoteWhereInput
  votedFor_none: VoteWhereInput
  log_every: LogItemWhereInput
  log_some: LogItemWhereInput
  log_none: LogItemWhereInput
  membershipLog_every: MembershipLogItemWhereInput
  membershipLog_some: MembershipLogItemWhereInput
  membershipLog_none: MembershipLogItemWhereInput
  membershipLogContributions_every: MembershipLogItemWhereInput
  membershipLogContributions_some: MembershipLogItemWhereInput
  membershipLogContributions_none: MembershipLogItemWhereInput
  eventsCreated_every: EventWhereInput
  eventsCreated_some: EventWhereInput
  eventsCreated_none: EventWhereInput
  eventsRSVPd_every: RSVPWhereInput
  eventsRSVPd_some: RSVPWhereInput
  eventsRSVPd_none: RSVPWhereInput
  eventsHosted_every: EventWhereInput
  eventsHosted_some: EventWhereInput
  eventsHosted_none: EventWhereInput
  trailsVisited_every: TrailWhereInput
  trailsVisited_some: TrailWhereInput
  trailsVisited_none: TrailWhereInput
  bandaids_every: BandaidWhereInput
  bandaids_some: BandaidWhereInput
  bandaids_none: BandaidWhereInput
  runReportsLogged_every: RunReportWhereInput
  runReportsLogged_some: RunReportWhereInput
  runReportsLogged_none: RunReportWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
  office: Office
}

type Vehicle implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  image: String
  mods: [String!]!
}

"""A connection to a list of items."""
type VehicleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleEdge]!
  aggregate: AggregateVehicle!
}

input VehicleCreateInput {
  id: ID
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  image: String
  mods: VehicleCreatemodsInput
}

input VehicleCreatemodsInput {
  set: [String!]
}

input VehicleCreateOneInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
}

"""An edge in a connection."""
type VehicleEdge {
  """The item at the end of the edge."""
  node: Vehicle!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  year_ASC
  year_DESC
  make_ASC
  make_DESC
  model_ASC
  model_DESC
  name_ASC
  name_DESC
  trim_ASC
  trim_DESC
  image_ASC
  image_DESC
}

type VehiclePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  image: String
  mods: [String!]!
}

type VehicleSubscriptionPayload {
  mutation: MutationType!
  node: Vehicle
  updatedFields: [String!]
  previousValues: VehiclePreviousValues
}

input VehicleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleWhereInput
}

input VehicleUpdateDataInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  image: String
  mods: VehicleUpdatemodsInput
}

input VehicleUpdateInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  image: String
  mods: VehicleUpdatemodsInput
}

input VehicleUpdateManyMutationInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  image: String
  mods: VehicleUpdatemodsInput
}

input VehicleUpdatemodsInput {
  set: [String!]
}

input VehicleUpdateOneInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VehicleUpdateDataInput
  upsert: VehicleUpsertNestedInput
}

input VehicleUpsertNestedInput {
  update: VehicleUpdateDataInput!
  create: VehicleCreateInput!
}

input VehicleWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  make: String

  """All values that are not equal to given value."""
  make_not: String

  """All values that are contained in given list."""
  make_in: [String!]

  """All values that are not contained in given list."""
  make_not_in: [String!]

  """All values less than the given value."""
  make_lt: String

  """All values less than or equal the given value."""
  make_lte: String

  """All values greater than the given value."""
  make_gt: String

  """All values greater than or equal the given value."""
  make_gte: String

  """All values containing the given string."""
  make_contains: String

  """All values not containing the given string."""
  make_not_contains: String

  """All values starting with the given string."""
  make_starts_with: String

  """All values not starting with the given string."""
  make_not_starts_with: String

  """All values ending with the given string."""
  make_ends_with: String

  """All values not ending with the given string."""
  make_not_ends_with: String
  model: String

  """All values that are not equal to given value."""
  model_not: String

  """All values that are contained in given list."""
  model_in: [String!]

  """All values that are not contained in given list."""
  model_not_in: [String!]

  """All values less than the given value."""
  model_lt: String

  """All values less than or equal the given value."""
  model_lte: String

  """All values greater than the given value."""
  model_gt: String

  """All values greater than or equal the given value."""
  model_gte: String

  """All values containing the given string."""
  model_contains: String

  """All values not containing the given string."""
  model_not_contains: String

  """All values starting with the given string."""
  model_starts_with: String

  """All values not starting with the given string."""
  model_not_starts_with: String

  """All values ending with the given string."""
  model_ends_with: String

  """All values not ending with the given string."""
  model_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  trim: String

  """All values that are not equal to given value."""
  trim_not: String

  """All values that are contained in given list."""
  trim_in: [String!]

  """All values that are not contained in given list."""
  trim_not_in: [String!]

  """All values less than the given value."""
  trim_lt: String

  """All values less than or equal the given value."""
  trim_lte: String

  """All values greater than the given value."""
  trim_gt: String

  """All values greater than or equal the given value."""
  trim_gte: String

  """All values containing the given string."""
  trim_contains: String

  """All values not containing the given string."""
  trim_not_contains: String

  """All values starting with the given string."""
  trim_starts_with: String

  """All values not starting with the given string."""
  trim_not_starts_with: String

  """All values ending with the given string."""
  trim_ends_with: String

  """All values not ending with the given string."""
  trim_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

input VehicleWhereUniqueInput {
  id: ID
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  ballot: Ballot!
  candidate: User
  voter: User!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  candidate: UserCreateOneWithoutVotesReceivedInput
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateManyWithoutBallotInput {
  create: [VoteCreateWithoutBallotInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutCandidateInput {
  create: [VoteCreateWithoutCandidateInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutBallotInput {
  id: ID
  candidate: UserCreateOneWithoutVotesReceivedInput
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateWithoutCandidateInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateWithoutVoterInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  candidate: UserCreateOneWithoutVotesReceivedInput
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  candidate: UserUpdateOneWithoutVotesReceivedInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateManyWithoutBallotInput {
  create: [VoteCreateWithoutBallotInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutBallotInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutBallotInput!]
}

input VoteUpdateManyWithoutCandidateInput {
  create: [VoteCreateWithoutCandidateInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutCandidateInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutCandidateInput!]
}

input VoteUpdateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutVoterInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutVoterInput!]
}

input VoteUpdateWithoutBallotDataInput {
  candidate: UserUpdateOneWithoutVotesReceivedInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateWithoutCandidateDataInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateWithoutVoterDataInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  candidate: UserUpdateOneWithoutVotesReceivedInput
}

input VoteUpdateWithWhereUniqueWithoutBallotInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutBallotDataInput!
}

input VoteUpdateWithWhereUniqueWithoutCandidateInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCandidateDataInput!
}

input VoteUpdateWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutVoterDataInput!
}

input VoteUpsertWithWhereUniqueWithoutBallotInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutBallotDataInput!
  create: VoteCreateWithoutBallotInput!
}

input VoteUpsertWithWhereUniqueWithoutCandidateInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCandidateDataInput!
  create: VoteCreateWithoutCandidateInput!
}

input VoteUpsertWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutVoterDataInput!
  create: VoteCreateWithoutVoterInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ballot: BallotWhereInput
  candidate: UserWhereInput
  voter: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
